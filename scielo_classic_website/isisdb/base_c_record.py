# generated by build
import logging

from scielo_classic_website.isisdb.raw_record import RawRecord


# generated by build
class BaseReferenceRecord(RawRecord):
    def __init__(self, record):
        super().__init__(record)

    # generated by build
    @property
    def analytic_person_authors(self):
        """
        Analytic Anonymous
        v010 {'_': 'anonymous', 'n': 'given_names', 'p': 'prefix', 'r': 'role', 's': 'surname'}
        Returns:
        {'anonymous': '', 'given_names': '', 'prefix': '', 'role': '', 'surname': ''}
        """
        if not hasattr(self, "_analytic_person_authors"):
            self._analytic_person_authors = self.get_field_content(
                "v010",
                {
                    "_": "anonymous",
                    "n": "given_names",
                    "p": "prefix",
                    "r": "role",
                    "s": "surname",
                },
                False,
            )
        return self._analytic_person_authors

    # generated by build
    @property
    def analytic_corporative_authors(self):
        """
        Analytic Corporative Author
        v011 {'_': 'name', 'd': 'division'}
        Returns:
        {'name': '', 'division': ''}
        """
        if not hasattr(self, "_analytic_corporative_authors"):
            self._analytic_corporative_authors = self.get_field_content(
                "v011", {"_": "name", "d": "division"}, False
            )
        return self._analytic_corporative_authors

    # generated by build
    @property
    def article_title(self):
        """
        Article Title
        v012 {'_': 'text', 'l': 'language'}
        Returns:
        {'text': '', 'language': ''}
        """
        if not hasattr(self, "_article_title"):
            self._article_title = self.get_field_content(
                "v012", {"_": "text", "l": "language"}, True
            )
        return self._article_title

    # generated by build
    @property
    def pages_range(self):
        """
        v014 {'_': 'range', 'e': 'elocation'}
        Returns:
        {'range': '', 'elocation': ''}
        """
        if not hasattr(self, "_pages_range"):
            self._pages_range = self.get_field_content(
                "v014", {"_": "range", "e": "elocation"}, True
            )
        return self._pages_range

    # generated by build
    @property
    def monographic_person_authors(self):
        """
        Monographic Anonymous
        v016 {'_': 'anonymous', 'n': 'given_names', 'p': 'prefix', 'r': 'role', 's': 'surname'}
        Returns:
        {'anonymous': '', 'given_names': '', 'prefix': '', 'role': '', 'surname': ''}
        """
        if not hasattr(self, "_monographic_person_authors"):
            self._monographic_person_authors = self.get_field_content(
                "v016",
                {
                    "_": "anonymous",
                    "n": "given_names",
                    "p": "prefix",
                    "r": "role",
                    "s": "surname",
                },
                False,
            )
        return self._monographic_person_authors

    # generated by build
    @property
    def monographic_corporative_authors(self):
        """
        Monographic Corporative Author
        v017 {'_': 'name', 'd': 'division'}
        Returns:
        {'name': '', 'division': ''}
        """
        if not hasattr(self, "_monographic_corporative_authors"):
            self._monographic_corporative_authors = self.get_field_content(
                "v017", {"_": "name", "d": "division"}, False
            )
        return self._monographic_corporative_authors

    # generated by build
    @property
    def monographic_title(self):
        """
        Monographic Title
        v018 {'_': 'text', 'l': 'language'}
        Returns:
        {'text': '', 'language': ''}
        """
        if not hasattr(self, "_monographic_title"):
            self._monographic_title = self.get_field_content(
                "v018", {"_": "text", "l": "language"}, True
            )
        return self._monographic_title

    # generated by build
    @property
    def size(self):
        """
        Size
        v020 {'_': 'size', 'u': 'unit'}
        Returns:
        {'size': '', 'unit': ''}
        """
        if not hasattr(self, "_size"):
            self._size = self.get_field_content(
                "v020", {"_": "size", "u": "unit"}, True
            )
        return self._size

    # generated by build
    @property
    def tome(self):
        """
        v022
        """
        if not hasattr(self, "_tome"):
            self._tome = self.get_field_content("v022", {}, True)
        return self._tome

    # generated by build
    @property
    def coltitle(self):
        """
        Collection title
        v025
        """
        if not hasattr(self, "_coltitle"):
            self._coltitle = self.get_field_content("v025", {}, True)
        return self._coltitle

    # generated by build
    @property
    def colvolid(self):
        """
        Collection volume
        v026
        """
        if not hasattr(self, "_colvolid"):
            self._colvolid = self.get_field_content("v026", {}, True)
        return self._colvolid

    # generated by build
    @property
    def serial_person_authors(self):
        """
        Monographic Anonymous
        v028 {'_': 'anonymous', 'n': 'given_names', 'p': 'prefix', 'r': 'role', 's': 'surname'}
        Returns:
        {'anonymous': '', 'given_names': '', 'prefix': '', 'role': '', 'surname': ''}
        """
        if not hasattr(self, "_serial_person_authors"):
            self._serial_person_authors = self.get_field_content(
                "v028",
                {
                    "_": "anonymous",
                    "n": "given_names",
                    "p": "prefix",
                    "r": "role",
                    "s": "surname",
                },
                False,
            )
        return self._serial_person_authors

    # generated by build
    @property
    def serial_corporative_authors(self):
        """
        Monographic Corporative Author
        v029 {'_': 'name', 'd': 'division'}
        Returns:
        {'name': '', 'division': ''}
        """
        if not hasattr(self, "_serial_corporative_authors"):
            self._serial_corporative_authors = self.get_field_content(
                "v029", {"_": "name", "d": "division"}, False
            )
        return self._serial_corporative_authors

    # generated by build
    @property
    def journal_title(self):
        """
        Journal title
        v030 {'_': 'text', 'l': 'language'}
        Returns:
        {'text': '', 'language': ''}
        """
        if not hasattr(self, "_journal_title"):
            self._journal_title = self.get_field_content(
                "v030", {"_": "text", "l": "language"}, True
            )
        return self._journal_title

    # generated by build
    @property
    def volume(self):
        """
        Volume
        v031
        """
        if not hasattr(self, "_volume"):
            self._volume = self.get_field_content("v031", {}, True)
        return self._volume

    # generated by build
    @property
    def issue(self):
        """
        Issue
        v032 {'n': 'number', 's': 'suppl'}
        Returns:
        {'number': '', 'suppl': ''}
        """
        if not hasattr(self, "_issue"):
            self._issue = self.get_field_content(
                "v032", {"n": "number", "s": "suppl"}, True
            )
        return self._issue

    # generated by build
    @property
    def issue_title(self):
        """
        Issue title
        v033
        """
        if not hasattr(self, "_issue_title"):
            self._issue_title = self.get_field_content("v033", {}, True)
        return self._issue_title

    # generated by build
    @property
    def issue_part(self):
        """
        Issue part
        v034
        """
        if not hasattr(self, "_issue_part"):
            self._issue_part = self.get_field_content("v034", {}, True)
        return self._issue_part

    # generated by build
    @property
    def issn(self):
        """
        ISSN
        v035
        """
        if not hasattr(self, "_issn"):
            self._issn = self.get_field_content("v035", {}, True)
        return self._issn

    # generated by build
    @property
    def ext_link(self):
        """
        Ext Link
        v037
        """
        if not hasattr(self, "_ext_link"):
            self._ext_link = self.get_field_content("v037", {}, True)
        return self._ext_link

    # generated by build
    @property
    def thesis_date(self):
        """
        Thesis Date
        v044
        """
        if not hasattr(self, "_thesis_date"):
            self._thesis_date = self.get_field_content("v044", {}, True)
        return self._thesis_date

    # generated by build
    @property
    def thesis_date_iso(self):
        """
        Thesis Date Iso
        v045
        """
        if not hasattr(self, "_thesis_date_iso"):
            self._thesis_date_iso = self.get_field_content("v045", {}, True)
        return self._thesis_date_iso

    # generated by build
    @property
    def thesis_location(self):
        """
        Thesis Location
        v046 {'_': 'city', 'e': 'state'}
        Returns:
        {'city': '', 'state': ''}
        """
        if not hasattr(self, "_thesis_location"):
            self._thesis_location = self.get_field_content(
                "v046", {"_": "city", "e": "state"}, True
            )
        return self._thesis_location

    # generated by build
    @property
    def thesis_country(self):
        """
        Thesis Country
        v047
        """
        if not hasattr(self, "_thesis_country"):
            self._thesis_country = self.get_field_content("v047", {}, True)
        return self._thesis_country

    # generated by build
    @property
    def thesis_organization(self):
        """
        Thesis Organization
        v050 {'_': 'name', 'd': 'division'}
        Returns:
        {'name': '', 'division': ''}
        """
        if not hasattr(self, "_thesis_organization"):
            self._thesis_organization = self.get_field_content(
                "v050", {"_": "name", "d": "division"}, True
            )
        return self._thesis_organization

    # generated by build
    @property
    def thesis_degree(self):
        """
        Thesis Degree
        v051
        """
        if not hasattr(self, "_thesis_degree"):
            self._thesis_degree = self.get_field_content("v051", {}, True)
        return self._thesis_degree

    # generated by build
    @property
    def conference_organization(self):
        """
        Conference Organization
        v052 {'_': 'name', 'd': 'division'}
        Returns:
        {'name': '', 'division': ''}
        """
        if not hasattr(self, "_conference_organization"):
            self._conference_organization = self.get_field_content(
                "v052", {"_": "name", "d": "division"}, True
            )
        return self._conference_organization

    # generated by build
    @property
    def conferences(self):
        """
        Conference
        v053 {'_': 'name', 'n': 'number'}
        Returns:
        {'name': '', 'number': ''}
        """
        if not hasattr(self, "_conferences"):
            self._conferences = self.get_field_content(
                "v053", {"_": "name", "n": "number"}, False
            )
        return self._conferences

    # generated by build
    @property
    def conference_date(self):
        """
        Conference Date
        v054
        """
        if not hasattr(self, "_conference_date"):
            self._conference_date = self.get_field_content("v054", {}, True)
        return self._conference_date

    # generated by build
    @property
    def conference_date_iso(self):
        """
        Conference Date Iso
        v055
        """
        if not hasattr(self, "_conference_date_iso"):
            self._conference_date_iso = self.get_field_content("v055", {}, True)
        return self._conference_date_iso

    # generated by build
    @property
    def conference_location(self):
        """
        Conference Location
        v056 {'_': 'city', 'e': 'state'}
        Returns:
        {'city': '', 'state': ''}
        """
        if not hasattr(self, "_conference_location"):
            self._conference_location = self.get_field_content(
                "v056", {"_": "city", "e": "state"}, True
            )
        return self._conference_location

    # generated by build
    @property
    def conference_country(self):
        """
        Conference Country
        v057
        """
        if not hasattr(self, "_conference_country"):
            self._conference_country = self.get_field_content("v057", {}, True)
        return self._conference_country

    # generated by build
    @property
    def project_sponsor(self):
        """
        Project Sponsor
        v058 {'_': 'name', 'd': 'division'}
        Returns:
        {'name': '', 'division': ''}
        """
        if not hasattr(self, "_project_sponsor"):
            self._project_sponsor = self.get_field_content(
                "v058", {"_": "name", "d": "division"}, True
            )
        return self._project_sponsor

    # generated by build
    @property
    def project_name(self):
        """
        Project Name
        v059
        """
        if not hasattr(self, "_project_name"):
            self._project_name = self.get_field_content("v059", {}, True)
        return self._project_name

    # generated by build
    @property
    def project_number(self):
        """
        Project Number
        v060
        """
        if not hasattr(self, "_project_number"):
            self._project_number = self.get_field_content("v060", {}, True)
        return self._project_number

    # generated by build
    @property
    def notes(self):
        """
        Notes
        v061
        """
        if not hasattr(self, "_notes"):
            self._notes = self.get_field_content("v061", {}, False)
        return self._notes

    # generated by build
    @property
    def publisher_name(self):
        """
        Publisher Name
        v062
        """
        if not hasattr(self, "_publisher_name"):
            self._publisher_name = self.get_field_content("v062", {}, True)
        return self._publisher_name

    # generated by build
    @property
    def edition(self):
        """
        Edition
        v063
        """
        if not hasattr(self, "_edition"):
            self._edition = self.get_field_content("v063", {}, True)
        return self._edition

    # generated by build
    @property
    def year(self):
        """
        Year
        v064
        """
        if not hasattr(self, "_year"):
            self._year = self.get_field_content("v064", {}, True)
        return self._year

    # generated by build
    @property
    def publication_date_iso(self):
        """
        Publication Date Iso
        v065
        """
        if not hasattr(self, "_publication_date_iso"):
            self._publication_date_iso = self.get_field_content("v065", {}, True)
        return self._publication_date_iso

    # generated by build
    @property
    def publisher_location(self):
        """
        Publisher Location
        v066 {'_': 'city', 'e': 'state'}
        Returns:
        {'city': '', 'state': ''}
        """
        if not hasattr(self, "_publisher_location"):
            self._publisher_location = self.get_field_content(
                "v066", {"_": "city", "e": "state"}, True
            )
        return self._publisher_location

    # generated by build
    @property
    def publisher_country(self):
        """
        Publisher Country
        v067
        """
        if not hasattr(self, "_publisher_country"):
            self._publisher_country = self.get_field_content("v067", {}, True)
        return self._publisher_country

    # generated by build
    @property
    def isbn(self):
        """
        ISBN
        v069
        """
        if not hasattr(self, "_isbn"):
            self._isbn = self.get_field_content("v069", {}, True)
        return self._isbn

    # generated by build
    @property
    def publication_type(self):
        """
        Publication Type
        v071
        """
        if not hasattr(self, "_publication_type"):
            self._publication_type = self.get_field_content("v071", {}, True)
        return self._publication_type

    # generated by build
    @property
    def version(self):
        """
        Version
        v095
        """
        if not hasattr(self, "_version"):
            self._version = self.get_field_content("v095", {}, True)
        return self._version

    # generated by build
    @property
    def access_date(self):
        """
        Access date
        v109
        """
        if not hasattr(self, "_access_date"):
            self._access_date = self.get_field_content("v109", {}, True)
        return self._access_date

    # generated by build
    @property
    def access_date_iso(self):
        """
        Access date_iso
        v110
        """
        if not hasattr(self, "_access_date_iso"):
            self._access_date_iso = self.get_field_content("v110", {}, True)
        return self._access_date_iso

    # generated by build
    @property
    def label(self):
        """
        Label
        v118
        """
        if not hasattr(self, "_label"):
            self._label = self.get_field_content("v118", {}, True)
        return self._label

    # generated by build
    @property
    def patent(self):
        """
        Patent
        v150 {'_': 'country', 'a': 'id', 'b': 'date', 'c': 'date_iso', 'd': 'organization'}
        Returns:
        {'country': '', 'id': '', 'date': '', 'date_iso': '', 'organization': ''}
        """
        if not hasattr(self, "_patent"):
            self._patent = self.get_field_content(
                "v150",
                {
                    "_": "country",
                    "a": "id",
                    "b": "date",
                    "c": "date_iso",
                    "d": "organization",
                },
                True,
            )
        return self._patent

    # generated by build
    @property
    def doi(self):
        """
        Doi
        v237
        """
        if not hasattr(self, "_doi"):
            self._doi = self.get_field_content("v237", {}, True)
        return self._doi

    # generated by build
    @property
    def pmid(self):
        """
        Pmid
        v238
        """
        if not hasattr(self, "_pmid"):
            self._pmid = self.get_field_content("v238", {}, True)
        return self._pmid

    # generated by build
    @property
    def pmcid(self):
        """
        Pmcid
        v239
        """
        if not hasattr(self, "_pmcid"):
            self._pmcid = self.get_field_content("v239", {}, True)
        return self._pmcid

    # generated by build
    @property
    def pages(self):
        """
        v514 {'e': 'elocation', 'f': 'first', 'l': 'last', 'r': 'range'}
        Returns:
        {'elocation': '', 'first': '', 'last': '', 'range': ''}
        """
        if not hasattr(self, "_pages"):
            self._pages = self.get_field_content(
                "v514",
                {"e": "elocation", "f": "first", "l": "last", "r": "range"},
                False,
            )
        return self._pages

    # generated by build
    @property
    def index_number(self):
        """
        Index number
        v701
        """
        if not hasattr(self, "_index_number"):
            self._index_number = self.get_field_content("v701", {}, True)
        return self._index_number

    # generated by build
    @property
    def paragraph_text(self):
        """
        Paragraph text
        v704 {'_': ''}
        Returns:
        {'': ''}
        """
        if not hasattr(self, "_paragraph_text"):
            self._paragraph_text = self.get_field_content("v704", {"_": ""}, True)
            # logging.info(f"paragraph_text: {self._paragraph_text}")
        return self._paragraph_text

    # generated by build
    @property
    def etal(self):
        """
        Etal
        v810
        """
        if not hasattr(self, "_etal"):
            self._etal = self.get_field_content("v810", {}, True)
        return self._etal
